{"version":3,"sources":["../src/ApiClient.js"],"names":["ApiClient","basePath","replace","authentications","defaultHeaders","timeout","cache","enableCookies","window","agent","param","undefined","Date","toJSON","toString","path","pathParams","match","url","fullMatch","key","value","hasOwnProperty","paramToString","encodeURIComponent","contentType","Boolean","contentTypes","i","length","isJsonMime","require","fs","err","ReadStream","Buffer","Blob","File","params","newParams","isFileParam","Array","isArray","collectionFormat","map","join","Error","request","authNames","forEach","authName","auth","type","username","password","apiKey","data","apiKeyPrefix","name","set","query","accessToken","response","returnType","status","body","Object","keys","text","convertToType","httpMethod","queryParams","headerParams","formParams","bodyParam","accepts","buildUrl","applyAuthToRequest","toUpperCase","getTime","normalizeParams","jsonPreferredMime","header","send","stringify","_formParams","attach","field","accept","responseType","attachCookies","withCredentials","Promise","resolve","reject","end","error","deserialize","saveCookies","str","parseInt","parseFloat","String","parseDate","constructFromObject","itemType","item","keyType","valueType","k","result","obj","CollectionFormatEnum","CSV","SSV","TSV","PIPES","MULTI","instance"],"mappings":"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","file":"ApiClient.js","sourcesContent":["/*\n * Copyright 2018 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * NIS2 API\n * This document defines all the nis2 api routes and behaviour\n *\n * OpenAPI spec version: 1.0.0\n * Contact: guillemchain@gmail.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n\nimport superagent from \"superagent\";\nimport querystring from \"querystring\";\n\n/**\n* @module ApiClient\n* @version 1.0.0\n*/\n\n/**\n* Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an\n* application to use this class directly - the *Api and model classes provide the public API for the service. The\n* contents of this file should be regarded as internal but are documented for completeness.\n* @alias module:ApiClient\n* @class\n*/\nexport default class ApiClient {\n\tconstructor() {\n\t\t/**\n\t\t * The base URL against which to resolve every API call's (relative) path.\n\t\t * @type {String}\n\t\t * @default http://localhost:3000\n\t\t */\n\t\tthis.basePath = 'http://localhost:3000'.replace(/\\/+$/, '');\n\n\t\t/**\n\t\t * The authentication methods to be included for all API calls.\n\t\t * @type {Array.<String>}\n\t\t */\n\t\tthis.authentications = {}\n\n\t\t/**\n\t\t * The default HTTP headers to be included for all API calls.\n\t\t * @type {Array.<String>}\n\t\t * @default {}\n\t\t */\n\t\tthis.defaultHeaders = {};\n\n\t\t/**\n\t\t * The default HTTP timeout for all API calls.\n\t\t * @type {Number}\n\t\t * @default 60000\n\t\t */\n\t\tthis.timeout = 60000;\n\n\t\t/**\n\t\t * If set to false an additional timestamp parameter is added to all API GET calls to\n\t\t * prevent browser caching\n\t\t * @type {Boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.cache = true;\n\n\t\t/**\n\t\t * If set to true, the client will save the cookies from each server\n\t\t * response, and return them in the next request.\n\t\t * @default false\n\t\t */\n\t\tthis.enableCookies = false;\n\n\t\t/*\n\t\t * Used to save and return cookies in a node.js (non-browser) setting,\n\t\t * if this.enableCookies is set to true.\n\t\t */\n\t\tif (typeof window === 'undefined') {\n\t\t\tthis.agent = new superagent.agent();\n\t\t}\n\t}\n\n\t/**\n\t * Returns a string representation for an actual parameter.\n\t * @param param The actual parameter.\n\t * @returns {String} The string representation of <code>param</code>.\n\t */\n\tparamToString(param) {\n\t\tif (param == undefined || param == null) {\n\t\t\treturn '';\n\t\t}\n\t\tif (param instanceof Date) {\n\t\t\treturn param.toJSON();\n\t\t}\n\n\t\treturn param.toString();\n\t}\n\n\t/**\n\t * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n\t * NOTE: query parameters are not handled here.\n\t * @param {String} path The path to append to the base URL.\n\t * @param {Object} pathParams The parameter values to append.\n\t * @returns {String} The encoded path with parameter values substituted.\n\t */\n\tbuildUrl(path, pathParams) {\n\t\tif (!path.match(/^\\//)) {\n\t\t\tpath = '/' + path;\n\t\t}\n\n\t\tvar url = this.basePath + path;\n\t\turl = url.replace(/\\{([\\w-]+)\\}/g, (fullMatch, key) => {\n\t\t\tvar value;\n\t\t\tif (pathParams.hasOwnProperty(key)) {\n\t\t\t\tvalue = this.paramToString(pathParams[key]);\n\t\t\t} else {\n\t\t\t\tvalue = fullMatch;\n\t\t\t}\n\n\t\t\treturn encodeURIComponent(value);\n\t\t});\n\n\t\treturn url;\n\t}\n\n\t/**\n\t * Checks whether the given content type represents JSON.<br>\n\t * JSON content type examples:<br>\n\t * <ul>\n\t * <li>application/json</li>\n\t * <li>application/json; charset=UTF8</li>\n\t * <li>APPLICATION/JSON</li>\n\t * </ul>\n\t * @param {String} contentType The MIME content type to check.\n\t * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n\t */\n\tisJsonMime(contentType) {\n\t\treturn Boolean(contentType != null && contentType.match(/^application\\/json(;.*)?$/i));\n\t}\n\n\t/**\n\t * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n\t * @param {Array.<String>} contentTypes\n\t * @returns {String} The chosen content type, preferring JSON.\n\t */\n\tjsonPreferredMime(contentTypes) {\n\t\tfor (var i = 0; i < contentTypes.length; i++) {\n\t\t\tif (this.isJsonMime(contentTypes[i])) {\n\t\t\t\treturn contentTypes[i];\n\t\t\t}\n\t\t}\n\n\t\treturn contentTypes[0];\n\t}\n\n\t/**\n\t * Checks whether the given parameter value represents file-like content.\n\t * @param param The parameter to check.\n\t * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.\n\t */\n\tisFileParam(param) {\n\t\t// fs.ReadStream in Node.js and Electron (but not in runtime like browserify)\n\t\tif (typeof require === 'function') {\n\t\t\tlet fs;\n\t\t\ttry {\n\t\t\t\tfs = require('fs');\n\t\t\t} catch (err) {}\n\t\t\tif (fs && fs.ReadStream && param instanceof fs.ReadStream) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// Buffer in Node.js\n\t\tif (typeof Buffer === 'function' && param instanceof Buffer) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Blob in browser\n\t\tif (typeof Blob === 'function' && param instanceof Blob) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// File in browser (it seems File object is also instance of Blob, but keep this for safe)\n\t\tif (typeof File === 'function' && param instanceof File) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Normalizes parameter values:\n\t * <ul>\n\t * <li>remove nils</li>\n\t * <li>keep files and arrays</li>\n\t * <li>format to string with `paramToString` for other cases</li>\n\t * </ul>\n\t * @param {Object.<String, Object>} params The parameters as object properties.\n\t * @returns {Object.<String, Object>} normalized parameters.\n\t */\n\tnormalizeParams(params) {\n\t\tvar newParams = {};\n\t\tfor (var key in params) {\n\t\t\tif (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {\n\t\t\t\tvar value = params[key];\n\t\t\t\tif (this.isFileParam(value) || Array.isArray(value)) {\n\t\t\t\t\tnewParams[key] = value;\n\t\t\t\t} else {\n\t\t\t\t\tnewParams[key] = this.paramToString(value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn newParams;\n\t}\n\n\t/**\n\t * Enumeration of collection format separator strategies.\n\t * @enum {String}\n\t * @readonly\n\t */\n\tstatic CollectionFormatEnum = {\n\t\t/**\n\t\t * Comma-separated values. Value: <code>csv</code>\n\t\t * @const\n\t\t */\n\t\tCSV: ',',\n\n\t\t/**\n\t\t * Space-separated values. Value: <code>ssv</code>\n\t\t * @const\n\t\t */\n\t\tSSV: ' ',\n\n\t\t/**\n\t\t * Tab-separated values. Value: <code>tsv</code>\n\t\t * @const\n\t\t */\n\t\tTSV: '\\t',\n\n\t\t/**\n\t\t * Pipe(|)-separated values. Value: <code>pipes</code>\n\t\t * @const\n\t\t */\n\t\tPIPES: '|',\n\n\t\t/**\n\t\t * Native array. Value: <code>multi</code>\n\t\t * @const\n\t\t */\n\t\tMULTI: 'multi'\n\t};\n\n\t/**\n\t * Builds a string representation of an array-type actual parameter, according to the given collection format.\n\t * @param {Array} param An array parameter.\n\t * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n\t * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n\t * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n\t */\n\tbuildCollectionParam(param, collectionFormat) {\n\t\tif (param == null) {\n\t\t\treturn null;\n\t\t}\n\t\tswitch (collectionFormat) {\n\t\t\tcase 'csv':\n\t\t\t\treturn param.map(this.paramToString).join(',');\n\t\t\tcase 'ssv':\n\t\t\t\treturn param.map(this.paramToString).join(' ');\n\t\t\tcase 'tsv':\n\t\t\t\treturn param.map(this.paramToString).join('\\t');\n\t\t\tcase 'pipes':\n\t\t\t\treturn param.map(this.paramToString).join('|');\n\t\t\tcase 'multi':\n\t\t\t\t//return the array directly as SuperAgent will handle it as expected\n\t\t\t\treturn param.map(this.paramToString);\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unknown collection format: ' + collectionFormat);\n\t\t}\n\t}\n\n\t/**\n\t * Applies authentication headers to the request.\n\t * @param {Object} request The request object created by a <code>superagent()</code> call.\n\t * @param {Array.<String>} authNames An array of authentication method names.\n\t */\n\tapplyAuthToRequest(request, authNames) {\n\t\tauthNames.forEach((authName) => {\n\t\t\tvar auth = this.authentications[authName];\n\t\t\tswitch (auth.type) {\n\t\t\t\tcase 'basic':\n\t\t\t\t\tif (auth.username || auth.password) {\n\t\t\t\t\t\trequest.auth(auth.username || '', auth.password || '');\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'apiKey':\n\t\t\t\t\tif (auth.apiKey) {\n\t\t\t\t\t\tvar data = {};\n\t\t\t\t\t\tif (auth.apiKeyPrefix) {\n\t\t\t\t\t\t\tdata[auth.name] = auth.apiKeyPrefix + ' ' + auth.apiKey;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdata[auth.name] = auth.apiKey;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (auth['in'] === 'header') {\n\t\t\t\t\t\t\trequest.set(data);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trequest.query(data);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'oauth2':\n\t\t\t\t\tif (auth.accessToken) {\n\t\t\t\t\t\trequest.set({'Authorization': 'Bearer ' + auth.accessToken});\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Unknown authentication type: ' + auth.type);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Deserializes an HTTP response body into a value of the specified type.\n\t * @param {Object} response A SuperAgent response object.\n\t * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n\t * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n\t * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n\t * all properties on <code>data<code> will be converted to this type.\n\t * @returns A value of the specified type.\n\t */\n\tdeserialize(response, returnType) {\n\t\tif (response == null || returnType == null || response.status == 204) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Rely on SuperAgent for parsing response body.\n\t\t// See http://visionmedia.github.io/superagent/#parsing-response-bodies\n\t\tvar data = response.body;\n\t\tif (data == null || (typeof data === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length)) {\n\t\t\t// SuperAgent does not always produce a body; use the unparsed response as a fallback\n\t\t\tdata = response.text;\n\t\t}\n\n\t\treturn ApiClient.convertToType(data, returnType);\n\t}\n\n\n\t/**\n\t * Invokes the REST service using the supplied settings and parameters.\n\t * @param {String} path The base URL to invoke.\n\t * @param {String} httpMethod The HTTP method to use.\n\t * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n\t * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n\t * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n\t * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n\t * @param {Object} bodyParam The value to pass as the request body.\n\t * @param {Array.<String>} authNames An array of authentication type names.\n\t * @param {Array.<String>} contentTypes An array of request MIME types.\n\t * @param {Array.<String>} accepts An array of acceptable response MIME types.\n\t * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n\t * constructor for a complex type.\n\t * @returns {Promise} A {@link https://www.promisejs.org/|Promise} object.\n\t */\n\tcallApi(path, httpMethod, pathParams,\n\t\t\tqueryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts,\n\t\t\treturnType) {\n\n\t\tvar url = this.buildUrl(path, pathParams);\n\t\tvar request = superagent(httpMethod, url);\n\n\t\t// apply authentications\n\t\tthis.applyAuthToRequest(request, authNames);\n\n\t\t// set query parameters\n\t\tif (httpMethod.toUpperCase() === 'GET' && this.cache === false) {\n\t\t\tqueryParams['_'] = new Date().getTime();\n\t\t}\n\n\t\trequest.query(this.normalizeParams(queryParams));\n\n\t\t// set header parameters\n\t\trequest.set(this.defaultHeaders).set(this.normalizeParams(headerParams));\n\n\t\t// set request timeout\n\t\trequest.timeout(this.timeout);\n\n\t\tvar contentType = this.jsonPreferredMime(contentTypes);\n\t\tif (contentType) {\n\t\t\t// Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)\n\t\t\tif(contentType != 'multipart/form-data') {\n\t\t\t\trequest.type(contentType);\n\t\t\t}\n\t\t} else if (!request.header['Content-Type']) {\n\t\t\trequest.type('application/json');\n\t\t}\n\n\t\tif (contentType === 'application/x-www-form-urlencoded') {\n\t\t\trequest.send(querystring.stringify(this.normalizeParams(formParams)));\n\t\t} else if (contentType == 'multipart/form-data') {\n\t\t\tvar _formParams = this.normalizeParams(formParams);\n\t\t\tfor (var key in _formParams) {\n\t\t\t\tif (_formParams.hasOwnProperty(key)) {\n\t\t\t\t\tif (this.isFileParam(_formParams[key])) {\n\t\t\t\t\t\t// file field\n\t\t\t\t\t\trequest.attach(key, _formParams[key]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\trequest.field(key, _formParams[key]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (bodyParam) {\n\t\t\trequest.send(bodyParam);\n\t\t}\n\n\t\tvar accept = this.jsonPreferredMime(accepts);\n\t\tif (accept) {\n\t\t\trequest.accept(accept);\n\t\t}\n\n\t\tif (returnType === 'Blob') {\n\t\t\trequest.responseType('blob');\n\t\t} else if (returnType === 'String') {\n\t\t\trequest.responseType('string');\n\t\t}\n\n\t\t// Attach previously saved cookies, if enabled\n\t\tif (this.enableCookies){\n\t\t\tif (typeof window === 'undefined') {\n\t\t\t\tthis.agent.attachCookies(request);\n\t\t\t}\n\t\t\telse {\n\t\t\t\trequest.withCredentials();\n\t\t\t}\n\t\t}\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\trequest.end((error, response) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar data = this.deserialize(response, returnType);\n\t\t\t\t\t\tif (this.enableCookies && typeof window === 'undefined'){\n\t\t\t\t\t\t\tthis.agent.saveCookies(response);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresolve({data, response});\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\n\t}\n\n\t/**\n\t * Parses an ISO-8601 string representation of a date value.\n\t * @param {String} str The date value as a string.\n\t * @returns {Date} The parsed date object.\n\t */\n\tstatic parseDate(str) {\n\t\treturn new Date(str.replace(/T/i, ' '));\n\t}\n\n\t/**\n\t * Converts a value to the specified type.\n\t * @param {(String|Object)} data The data to convert, as a string or object.\n\t * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types\n\t * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n\t * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n\t * all properties on <code>data<code> will be converted to this type.\n\t * @returns An instance of the specified type or null or undefined if data is null or undefined.\n\t */\n\tstatic convertToType(data, type) {\n\t\tif (data === null || data === undefined)\n\t\t\treturn data\n\n\t\tswitch (type) {\n\t\t\tcase 'Boolean':\n\t\t\t\treturn Boolean(data);\n\t\t\tcase 'Integer':\n\t\t\t\treturn parseInt(data, 10);\n\t\t\tcase 'Number':\n\t\t\t\treturn parseFloat(data);\n\t\t\tcase 'String':\n\t\t\t\treturn String(data);\n\t\t\tcase 'Date':\n\t\t\t\treturn ApiClient.parseDate(String(data));\n\t\t\tcase 'Blob':\n\t\t\t\treturn data;\n\t\t\tdefault:\n\t\t\t\tif (type === Object) {\n\t\t\t\t\t// generic object, return directly\n\t\t\t\t\treturn data;\n\t\t\t\t} else if (typeof type === 'function') {\n\t\t\t\t\t// for model type like: User\n\t\t\t\t\treturn type.constructFromObject(data);\n\t\t\t\t} else if (Array.isArray(type)) {\n\t\t\t\t\t// for array type like: ['String']\n\t\t\t\t\tvar itemType = type[0];\n\n\t\t\t\t\treturn data.map((item) => {\n\t\t\t\t\t\treturn ApiClient.convertToType(item, itemType);\n\t\t\t\t\t});\n\t\t\t\t} else if (typeof type === 'object') {\n\t\t\t\t\t// for plain object type like: {'String': 'Integer'}\n\t\t\t\t\tvar keyType, valueType;\n\t\t\t\t\tfor (var k in type) {\n\t\t\t\t\t\tif (type.hasOwnProperty(k)) {\n\t\t\t\t\t\t\tkeyType = k;\n\t\t\t\t\t\t\tvalueType = type[k];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvar result = {};\n\t\t\t\t\tfor (var k in data) {\n\t\t\t\t\t\tif (data.hasOwnProperty(k)) {\n\t\t\t\t\t\t\tvar key = ApiClient.convertToType(k, keyType);\n\t\t\t\t\t\t\tvar value = ApiClient.convertToType(data[k], valueType);\n\t\t\t\t\t\t\tresult[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn result;\n\t\t\t\t} else {\n\t\t\t\t\t// for unknown type, return the data directly\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Constructs a new map or array model from REST data.\n\t * @param data {Object|Array} The REST data.\n\t * @param obj {Object|Array} The target object or array.\n\t */\n\tstatic constructFromObject(data, obj, itemType) {\n\t\tif (Array.isArray(data)) {\n\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\tif (data.hasOwnProperty(i))\n\t\t\t\t\tobj[i] = ApiClient.convertToType(data[i], itemType);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (var k in data) {\n\t\t\t\tif (data.hasOwnProperty(k))\n\t\t\t\t\tobj[k] = ApiClient.convertToType(data[k], itemType);\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n* The default API client implementation.\n* @type {module:ApiClient}\n*/\nApiClient.instance = new ApiClient();\n"]}