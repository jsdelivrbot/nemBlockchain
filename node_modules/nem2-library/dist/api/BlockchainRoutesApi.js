'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
opyright 2018 NEM

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

nless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.


/**
 * NIS2 API
 * This document defines all the nis2 api routes and behaviour
 *
 * OpenAPI spec version: 1.0.0
 * Contact: guillemchain@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _BlockInfoDTO = require('../model/BlockInfoDTO');

var _BlockInfoDTO2 = _interopRequireDefault(_BlockInfoDTO);

var _BlockchainScoreDTO = require('../model/BlockchainScoreDTO');

var _BlockchainScoreDTO2 = _interopRequireDefault(_BlockchainScoreDTO);

var _BlockchainStorageInfoDTO = require('../model/BlockchainStorageInfoDTO');

var _BlockchainStorageInfoDTO2 = _interopRequireDefault(_BlockchainStorageInfoDTO);

var _HeightDTO = require('../model/HeightDTO');

var _HeightDTO2 = _interopRequireDefault(_HeightDTO);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * BlockchainRoutes service.
 * @module api/BlockchainRoutesApi
 * @version 1.0.0
 */
var BlockchainRoutesApi = function () {

	/**
  * Constructs a new BlockchainRoutesApi.
  * @alias module:api/BlockchainRoutesApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
	function BlockchainRoutesApi(apiClient) {
		_classCallCheck(this, BlockchainRoutesApi);

		this.apiClient = apiClient || _ApiClient2.default.instance;
	}

	/**
  * Get block information
  * Returns block information for a given block height
  * @param {Number} height Block height
  * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BlockInfoDTO} and HTTP response
  */


	_createClass(BlockchainRoutesApi, [{
		key: 'getBlockByHeightWithHttpInfo',
		value: function getBlockByHeightWithHttpInfo(height) {
			var postBody = null;

			// verify the required parameter 'height' is set
			if (height === undefined || height === null) {
				throw new Error("Missing the required parameter 'height' when calling getBlockByHeight");
			}

			var pathParams = {
				'height': height
			};
			var queryParams = {};
			var headerParams = {};
			var formParams = {};

			var authNames = [];
			var contentTypes = [];
			var accepts = ['application/json'];
			var returnType = _BlockInfoDTO2.default;

			return this.apiClient.callApi('/block/{height}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
		}

		/**
   * Get block information
   * Returns block information for a given block height
   * @param {Number} height Block height
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BlockInfoDTO}
   */

	}, {
		key: 'getBlockByHeight',
		value: function getBlockByHeight(height) {
			return this.getBlockByHeightWithHttpInfo(height).then(function (response_and_data) {
				return response_and_data.data;
			});
		}

		/**
   * Get transactions from a block information
   * Returns all transactions information for a given block height
   * @param {Number} height Block height
   * @param {Object} opts Optional parameters
   * @param {Number} opts.pageSize The numbers of transactions to return
   * @param {String} opts.id Id last transaction id to apply pagination
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<Object>} and HTTP response
   */

	}, {
		key: 'getBlockTransactionsWithHttpInfo',
		value: function getBlockTransactionsWithHttpInfo(height, opts) {
			opts = opts || {};
			var postBody = null;

			// verify the required parameter 'height' is set
			if (height === undefined || height === null) {
				throw new Error("Missing the required parameter 'height' when calling getBlockTransactions");
			}

			var pathParams = {
				'height': height
			};
			var queryParams = {
				'pageSize': opts['pageSize'],
				'id': opts['id']
			};
			var headerParams = {};
			var formParams = {};

			var authNames = [];
			var contentTypes = [];
			var accepts = ['application/json'];
			var returnType = [Object];

			return this.apiClient.callApi('/block/{height}/transactions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
		}

		/**
   * Get transactions from a block information
   * Returns all transactions information for a given block height
   * @param {Number} height Block height
   * @param {Object} opts Optional parameters
   * @param {Number} opts.pageSize The numbers of transactions to return
   * @param {String} opts.id Id last transaction id to apply pagination
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<Object>}
   */

	}, {
		key: 'getBlockTransactions',
		value: function getBlockTransactions(height, opts) {
			return this.getBlockTransactionsWithHttpInfo(height, opts).then(function (response_and_data) {
				return response_and_data.data;
			});
		}

		/**
   * Get the current height of the chain
   * Returns the current height of the blockchain
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/HeightDTO} and HTTP response
   */

	}, {
		key: 'getBlockchainHeightWithHttpInfo',
		value: function getBlockchainHeightWithHttpInfo() {
			var postBody = null;

			var pathParams = {};
			var queryParams = {};
			var headerParams = {};
			var formParams = {};

			var authNames = [];
			var contentTypes = [];
			var accepts = ['application/json'];
			var returnType = _HeightDTO2.default;

			return this.apiClient.callApi('/chain/height', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
		}

		/**
   * Get the current height of the chain
   * Returns the current height of the blockchain
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HeightDTO}
   */

	}, {
		key: 'getBlockchainHeight',
		value: function getBlockchainHeight() {
			return this.getBlockchainHeightWithHttpInfo().then(function (response_and_data) {
				return response_and_data.data;
			});
		}

		/**
   * Get the current score of the chain
   * Returns the current chain score
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BlockchainScoreDTO} and HTTP response
   */

	}, {
		key: 'getBlockchainScoreWithHttpInfo',
		value: function getBlockchainScoreWithHttpInfo() {
			var postBody = null;

			var pathParams = {};
			var queryParams = {};
			var headerParams = {};
			var formParams = {};

			var authNames = [];
			var contentTypes = [];
			var accepts = ['application/json'];
			var returnType = _BlockchainScoreDTO2.default;

			return this.apiClient.callApi('/chain/score', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
		}

		/**
   * Get the current score of the chain
   * Returns the current chain score
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BlockchainScoreDTO}
   */

	}, {
		key: 'getBlockchainScore',
		value: function getBlockchainScore() {
			return this.getBlockchainScoreWithHttpInfo().then(function (response_and_data) {
				return response_and_data.data;
			});
		}

		/**
   * Get blocks information
   * Returns blocks information for a given block height and limit
   * @param {Number} height The block height at which information should be returned
   * @param {Number} limit Block limit
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/BlockInfoDTO>} and HTTP response
   */

	}, {
		key: 'getBlocksByHeightWithLimitWithHttpInfo',
		value: function getBlocksByHeightWithLimitWithHttpInfo(height, limit) {
			var postBody = null;

			// verify the required parameter 'height' is set
			if (height === undefined || height === null) {
				throw new Error("Missing the required parameter 'height' when calling getBlocksByHeightWithLimit");
			}

			// verify the required parameter 'limit' is set
			if (limit === undefined || limit === null) {
				throw new Error("Missing the required parameter 'limit' when calling getBlocksByHeightWithLimit");
			}

			var pathParams = {
				'height': height,
				'limit': limit
			};
			var queryParams = {};
			var headerParams = {};
			var formParams = {};

			var authNames = [];
			var contentTypes = [];
			var accepts = ['application/json'];
			var returnType = [_BlockInfoDTO2.default];

			return this.apiClient.callApi('/blocks/{height}/limit/{limit}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
		}

		/**
   * Get blocks information
   * Returns blocks information for a given block height and limit
   * @param {Number} height The block height at which information should be returned
   * @param {Number} limit Block limit
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/BlockInfoDTO>}
   */

	}, {
		key: 'getBlocksByHeightWithLimit',
		value: function getBlocksByHeightWithLimit(height, limit) {
			return this.getBlocksByHeightWithLimitWithHttpInfo(height, limit).then(function (response_and_data) {
				return response_and_data.data;
			});
		}

		/**
   * Get the storage information
   * Returns statistical information about the blockchain
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BlockchainStorageInfoDTO} and HTTP response
   */

	}, {
		key: 'getDiagnosticStorageWithHttpInfo',
		value: function getDiagnosticStorageWithHttpInfo() {
			var postBody = null;

			var pathParams = {};
			var queryParams = {};
			var headerParams = {};
			var formParams = {};

			var authNames = [];
			var contentTypes = [];
			var accepts = ['application/json'];
			var returnType = _BlockchainStorageInfoDTO2.default;

			return this.apiClient.callApi('/diagnostic/storage', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
		}

		/**
   * Get the storage information
   * Returns statistical information about the blockchain
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BlockchainStorageInfoDTO}
   */

	}, {
		key: 'getDiagnosticStorage',
		value: function getDiagnosticStorage() {
			return this.getDiagnosticStorageWithHttpInfo().then(function (response_and_data) {
				return response_and_data.data;
			});
		}
	}]);

	return BlockchainRoutesApi;
}();

exports.default = BlockchainRoutesApi;
//# sourceMappingURL=BlockchainRoutesApi.js.map