{"version":3,"sources":["../../src/api/NamespaceRoutesApi.js"],"names":["NamespaceRoutesApi","apiClient","instance","namespaceId","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","callApi","getNamespaceWithHttpInfo","then","response_and_data","data","accountId","opts","getNamespacesFromAccountWithHttpInfo","addresses","getNamespacesFromAccountsWithHttpInfo","namespaceIds","getNamespacesNamesWithHttpInfo"],"mappings":"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","file":"NamespaceRoutesApi.js","sourcesContent":["/*\n * Copyright 2018 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * NIS2 API\n * This document defines all the nis2 api routes and behaviour\n *\n * OpenAPI spec version: 1.0.0\n * Contact: guillemchain@gmail.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n\nimport ApiClient from \"../ApiClient\";\nimport Addresses from '../model/Addresses';\nimport NamespaceIds from '../model/NamespaceIds';\nimport NamespaceInfoDTO from '../model/NamespaceInfoDTO';\nimport NamespaceNameDTO from '../model/NamespaceNameDTO';\n\n/**\n* NamespaceRoutes service.\n* @module api/NamespaceRoutesApi\n* @version 1.0.0\n*/\nexport default class NamespaceRoutesApi {\n\n    /**\n    * Constructs a new NamespaceRoutesApi. \n    * @alias module:api/NamespaceRoutesApi\n    * @class\n    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n    * default to {@link module:ApiClient#instance} if unspecified.\n    */\n    constructor(apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n    }\n\n\n\n    /**\n     * Get namespace information\n     * Returns information for a given namespaceId\n     * @param {String} namespaceId The namespace id for which information should be retreived\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NamespaceInfoDTO} and HTTP response\n     */\n    getNamespaceWithHttpInfo(namespaceId) {\n      let postBody = null;\n\n      // verify the required parameter 'namespaceId' is set\n      if (namespaceId === undefined || namespaceId === null) {\n        throw new Error(\"Missing the required parameter 'namespaceId' when calling getNamespace\");\n      }\n\n\n      let pathParams = {\n        'namespaceId': namespaceId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = NamespaceInfoDTO;\n\n      return this.apiClient.callApi(\n        '/namespace/{namespaceId}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get namespace information\n     * Returns information for a given namespaceId\n     * @param {String} namespaceId The namespace id for which information should be retreived\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NamespaceInfoDTO}\n     */\n    getNamespace(namespaceId) {\n      return this.getNamespaceWithHttpInfo(namespaceId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get namespaces an account owns\n     * Returns information about the namespaces an account owns\n     * @param {String} accountId The account address or public key for which namespaces should be retrieved\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The numbers of namespace to return\n     * @param {String} opts.id Id last namespace id to apply pagination\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/NamespaceInfoDTO>} and HTTP response\n     */\n    getNamespacesFromAccountWithHttpInfo(accountId, opts) {\n      opts = opts || {};\n      let postBody = null;\n\n      // verify the required parameter 'accountId' is set\n      if (accountId === undefined || accountId === null) {\n        throw new Error(\"Missing the required parameter 'accountId' when calling getNamespacesFromAccount\");\n      }\n\n\n      let pathParams = {\n        'accountId': accountId\n      };\n      let queryParams = {\n        'pageSize': opts['pageSize'],\n        'id': opts['id']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [NamespaceInfoDTO];\n\n      return this.apiClient.callApi(\n        '/account/{accountId}/namespaces', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get namespaces an account owns\n     * Returns information about the namespaces an account owns\n     * @param {String} accountId The account address or public key for which namespaces should be retrieved\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The numbers of namespace to return\n     * @param {String} opts.id Id last namespace id to apply pagination\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/NamespaceInfoDTO>}\n     */\n    getNamespacesFromAccount(accountId, opts) {\n      return this.getNamespacesFromAccountWithHttpInfo(accountId, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get namespaces information\n     * Returns namespaces information for a given set of addresses\n     * @param {module:model/Addresses} addresses Accounts address array\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The numbers of namespace to return\n     * @param {String} opts.id Id last namespace id to apply pagination\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/NamespaceInfoDTO>} and HTTP response\n     */\n    getNamespacesFromAccountsWithHttpInfo(addresses, opts) {\n      opts = opts || {};\n      let postBody = addresses;\n\n      // verify the required parameter 'addresses' is set\n      if (addresses === undefined || addresses === null) {\n        throw new Error(\"Missing the required parameter 'addresses' when calling getNamespacesFromAccounts\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n        'pageSize': opts['pageSize'],\n        'id': opts['id']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [NamespaceInfoDTO];\n\n      return this.apiClient.callApi(\n        '/account/namespaces', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get namespaces information\n     * Returns namespaces information for a given set of addresses\n     * @param {module:model/Addresses} addresses Accounts address array\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The numbers of namespace to return\n     * @param {String} opts.id Id last namespace id to apply pagination\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/NamespaceInfoDTO>}\n     */\n    getNamespacesFromAccounts(addresses, opts) {\n      return this.getNamespacesFromAccountsWithHttpInfo(addresses, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get readable names for a set of namespaces\n     * Returns names for namespaces\n     * @param {module:model/NamespaceIds} namespaceIds Array of namespaceIds\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/NamespaceNameDTO>} and HTTP response\n     */\n    getNamespacesNamesWithHttpInfo(namespaceIds) {\n      let postBody = namespaceIds;\n\n      // verify the required parameter 'namespaceIds' is set\n      if (namespaceIds === undefined || namespaceIds === null) {\n        throw new Error(\"Missing the required parameter 'namespaceIds' when calling getNamespacesNames\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [NamespaceNameDTO];\n\n      return this.apiClient.callApi(\n        '/namespace/names', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get readable names for a set of namespaces\n     * Returns names for namespaces\n     * @param {module:model/NamespaceIds} namespaceIds Array of namespaceIds\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/NamespaceNameDTO>}\n     */\n    getNamespacesNames(namespaceIds) {\n      return this.getNamespacesNamesWithHttpInfo(namespaceIds)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n}\n"]}