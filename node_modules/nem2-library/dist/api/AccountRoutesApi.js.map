{"version":3,"sources":["../../src/api/AccountRoutesApi.js"],"names":["AccountRoutesApi","apiClient","instance","accountId","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","callApi","getAccountInfoWithHttpInfo","then","response_and_data","data","getAccountMultisigWithHttpInfo","getAccountMultisigGraphWithHttpInfo","addresses","getAccountsInfoWithHttpInfo","publicKey","opts","Object","incomingTransactionsWithHttpInfo","outgoingTransactionsWithHttpInfo","partialTransactionsWithHttpInfo","transactionsWithHttpInfo","unconfirmedTransactionsWithHttpInfo"],"mappings":";;;;;;qjBAAA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;AAcA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA;;;;;IAKqBA,gB;;AAEjB;;;;;;;AAOA,4BAAYC,SAAZ,EAAuB;AAAA;;AACnB,SAAKA,SAAL,GAAiBA,aAAa,oBAAUC,QAAxC;AACH;;AAID;;;;;;;;;;+CAM2BC,S,EAAW;AACpC,UAAIC,WAAW,IAAf;;AAEA;AACA,UAAID,cAAcE,SAAd,IAA2BF,cAAc,IAA7C,EAAmD;AACjD,cAAM,IAAIG,KAAJ,CAAU,wEAAV,CAAN;AACD;;AAGD,UAAIC,aAAa;AACf,qBAAaJ;AADE,OAAjB;AAGA,UAAIK,cAAc,EAAlB;AAEA,UAAIC,eAAe,EAAnB;AAEA,UAAIC,aAAa,EAAjB;;AAGA,UAAIC,YAAY,EAAhB;AACA,UAAIC,eAAe,EAAnB;AACA,UAAIC,UAAU,CAAC,kBAAD,CAAd;AACA,UAAIC,qCAAJ;;AAEA,aAAO,KAAKb,SAAL,CAAec,OAAf,CACL,sBADK,EACmB,KADnB,EAELR,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;;AAED;;;;;;;;;mCAMeX,S,EAAW;AACxB,aAAO,KAAKa,0BAAL,CAAgCb,SAAhC,EACJc,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,kBAAkBC,IAAzB;AACD,OAHI,CAAP;AAID;;AAGD;;;;;;;;;mDAM+BhB,S,EAAW;AACxC,UAAIC,WAAW,IAAf;;AAEA;AACA,UAAID,cAAcE,SAAd,IAA2BF,cAAc,IAA7C,EAAmD;AACjD,cAAM,IAAIG,KAAJ,CAAU,4EAAV,CAAN;AACD;;AAGD,UAAIC,aAAa;AACf,qBAAaJ;AADE,OAAjB;AAGA,UAAIK,cAAc,EAAlB;AAEA,UAAIC,eAAe,EAAnB;AAEA,UAAIC,aAAa,EAAjB;;AAGA,UAAIC,YAAY,EAAhB;AACA,UAAIC,eAAe,EAAnB;AACA,UAAIC,UAAU,CAAC,kBAAD,CAAd;AACA,UAAIC,6CAAJ;;AAEA,aAAO,KAAKb,SAAL,CAAec,OAAf,CACL,+BADK,EAC4B,KAD5B,EAELR,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;;AAED;;;;;;;;;uCAMmBX,S,EAAW;AAC5B,aAAO,KAAKiB,8BAAL,CAAoCjB,SAApC,EACJc,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,kBAAkBC,IAAzB;AACD,OAHI,CAAP;AAID;;AAGD;;;;;;;;;wDAMoChB,S,EAAW;AAC7C,UAAIC,WAAW,IAAf;;AAEA;AACA,UAAID,cAAcE,SAAd,IAA2BF,cAAc,IAA7C,EAAmD;AACjD,cAAM,IAAIG,KAAJ,CAAU,iFAAV,CAAN;AACD;;AAGD,UAAIC,aAAa;AACf,qBAAaJ;AADE,OAAjB;AAGA,UAAIK,cAAc,EAAlB;AAEA,UAAIC,eAAe,EAAnB;AAEA,UAAIC,aAAa,EAAjB;;AAGA,UAAIC,YAAY,EAAhB;AACA,UAAIC,eAAe,EAAnB;AACA,UAAIC,UAAU,CAAC,kBAAD,CAAd;AACA,UAAIC,aAAa,uCAAjB;;AAEA,aAAO,KAAKb,SAAL,CAAec,OAAf,CACL,qCADK,EACkC,KADlC,EAELR,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;;AAED;;;;;;;;;4CAMwBX,S,EAAW;AACjC,aAAO,KAAKkB,mCAAL,CAAyClB,SAAzC,EACJc,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,kBAAkBC,IAAzB;AACD,OAHI,CAAP;AAID;;AAGD;;;;;;;;;gDAM4BG,S,EAAW;AACrC,UAAIlB,WAAWkB,SAAf;;AAEA;AACA,UAAIA,cAAcjB,SAAd,IAA2BiB,cAAc,IAA7C,EAAmD;AACjD,cAAM,IAAIhB,KAAJ,CAAU,yEAAV,CAAN;AACD;;AAGD,UAAIC,aAAa,EAAjB;AAEA,UAAIC,cAAc,EAAlB;AAEA,UAAIC,eAAe,EAAnB;AAEA,UAAIC,aAAa,EAAjB;;AAGA,UAAIC,YAAY,EAAhB;AACA,UAAIC,eAAe,EAAnB;AACA,UAAIC,UAAU,CAAC,kBAAD,CAAd;AACA,UAAIC,aAAa,0BAAjB;;AAEA,aAAO,KAAKb,SAAL,CAAec,OAAf,CACL,UADK,EACO,MADP,EAELR,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;;AAED;;;;;;;;;oCAMgBQ,S,EAAW;AACzB,aAAO,KAAKC,2BAAL,CAAiCD,SAAjC,EACJL,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,kBAAkBC,IAAzB;AACD,OAHI,CAAP;AAID;;AAGD;;;;;;;;;;;;qDASiCK,S,EAAWC,I,EAAM;AAChDA,aAAOA,QAAQ,EAAf;AACA,UAAIrB,WAAW,IAAf;;AAEA;AACA,UAAIoB,cAAcnB,SAAd,IAA2BmB,cAAc,IAA7C,EAAmD;AACjD,cAAM,IAAIlB,KAAJ,CAAU,8EAAV,CAAN;AACD;;AAGD,UAAIC,aAAa;AACf,qBAAaiB;AADE,OAAjB;AAGA,UAAIhB,cAAc;AAChB,oBAAYiB,KAAK,UAAL,CADI;AAEhB,cAAMA,KAAK,IAAL;AAFU,OAAlB;AAIA,UAAIhB,eAAe,EAAnB;AAEA,UAAIC,aAAa,EAAjB;;AAGA,UAAIC,YAAY,EAAhB;AACA,UAAIC,eAAe,EAAnB;AACA,UAAIC,UAAU,CAAC,kBAAD,CAAd;AACA,UAAIC,aAAa,CAACY,MAAD,CAAjB;;AAEA,aAAO,KAAKzB,SAAL,CAAec,OAAf,CACL,4CADK,EACyC,KADzC,EAELR,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;;AAED;;;;;;;;;;;;yCASqBU,S,EAAWC,I,EAAM;AACpC,aAAO,KAAKE,gCAAL,CAAsCH,SAAtC,EAAiDC,IAAjD,EACJR,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,kBAAkBC,IAAzB;AACD,OAHI,CAAP;AAID;;AAGD;;;;;;;;;;;;qDASiCK,S,EAAWC,I,EAAM;AAChDA,aAAOA,QAAQ,EAAf;AACA,UAAIrB,WAAW,IAAf;;AAEA;AACA,UAAIoB,cAAcnB,SAAd,IAA2BmB,cAAc,IAA7C,EAAmD;AACjD,cAAM,IAAIlB,KAAJ,CAAU,8EAAV,CAAN;AACD;;AAGD,UAAIC,aAAa;AACf,qBAAaiB;AADE,OAAjB;AAGA,UAAIhB,cAAc;AAChB,oBAAYiB,KAAK,UAAL,CADI;AAEhB,cAAMA,KAAK,IAAL;AAFU,OAAlB;AAIA,UAAIhB,eAAe,EAAnB;AAEA,UAAIC,aAAa,EAAjB;;AAGA,UAAIC,YAAY,EAAhB;AACA,UAAIC,eAAe,EAAnB;AACA,UAAIC,UAAU,CAAC,kBAAD,CAAd;AACA,UAAIC,aAAa,CAACY,MAAD,CAAjB;;AAEA,aAAO,KAAKzB,SAAL,CAAec,OAAf,CACL,4CADK,EACyC,KADzC,EAELR,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;;AAED;;;;;;;;;;;;yCASqBU,S,EAAWC,I,EAAM;AACpC,aAAO,KAAKG,gCAAL,CAAsCJ,SAAtC,EAAiDC,IAAjD,EACJR,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,kBAAkBC,IAAzB;AACD,OAHI,CAAP;AAID;;AAGD;;;;;;;;;;;;oDASgCK,S,EAAWC,I,EAAM;AAC/CA,aAAOA,QAAQ,EAAf;AACA,UAAIrB,WAAW,IAAf;;AAEA;AACA,UAAIoB,cAAcnB,SAAd,IAA2BmB,cAAc,IAA7C,EAAmD;AACjD,cAAM,IAAIlB,KAAJ,CAAU,6EAAV,CAAN;AACD;;AAGD,UAAIC,aAAa;AACf,qBAAaiB;AADE,OAAjB;AAGA,UAAIhB,cAAc;AAChB,oBAAYiB,KAAK,UAAL,CADI;AAEhB,cAAMA,KAAK,IAAL;AAFU,OAAlB;AAIA,UAAIhB,eAAe,EAAnB;AAEA,UAAIC,aAAa,EAAjB;;AAGA,UAAIC,YAAY,EAAhB;AACA,UAAIC,eAAe,EAAnB;AACA,UAAIC,UAAU,CAAC,kBAAD,CAAd;AACA,UAAIC,aAAa,CAACY,MAAD,CAAjB;;AAEA,aAAO,KAAKzB,SAAL,CAAec,OAAf,CACL,2CADK,EACwC,KADxC,EAELR,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;;AAED;;;;;;;;;;;;wCASoBU,S,EAAWC,I,EAAM;AACnC,aAAO,KAAKI,+BAAL,CAAqCL,SAArC,EAAgDC,IAAhD,EACJR,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,kBAAkBC,IAAzB;AACD,OAHI,CAAP;AAID;;AAGD;;;;;;;;;;;;6CASyBK,S,EAAWC,I,EAAM;AACxCA,aAAOA,QAAQ,EAAf;AACA,UAAIrB,WAAW,IAAf;;AAEA;AACA,UAAIoB,cAAcnB,SAAd,IAA2BmB,cAAc,IAA7C,EAAmD;AACjD,cAAM,IAAIlB,KAAJ,CAAU,sEAAV,CAAN;AACD;;AAGD,UAAIC,aAAa;AACf,qBAAaiB;AADE,OAAjB;AAGA,UAAIhB,cAAc;AAChB,oBAAYiB,KAAK,UAAL,CADI;AAEhB,cAAMA,KAAK,IAAL;AAFU,OAAlB;AAIA,UAAIhB,eAAe,EAAnB;AAEA,UAAIC,aAAa,EAAjB;;AAGA,UAAIC,YAAY,EAAhB;AACA,UAAIC,eAAe,EAAnB;AACA,UAAIC,UAAU,CAAC,kBAAD,CAAd;AACA,UAAIC,aAAa,CAACY,MAAD,CAAjB;;AAEA,aAAO,KAAKzB,SAAL,CAAec,OAAf,CACL,mCADK,EACgC,KADhC,EAELR,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;;AAED;;;;;;;;;;;;iCASaU,S,EAAWC,I,EAAM;AAC5B,aAAO,KAAKK,wBAAL,CAA8BN,SAA9B,EAAyCC,IAAzC,EACJR,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,kBAAkBC,IAAzB;AACD,OAHI,CAAP;AAID;;AAGD;;;;;;;;;;;;wDASoCK,S,EAAWC,I,EAAM;AACnDA,aAAOA,QAAQ,EAAf;AACA,UAAIrB,WAAW,IAAf;;AAEA;AACA,UAAIoB,cAAcnB,SAAd,IAA2BmB,cAAc,IAA7C,EAAmD;AACjD,cAAM,IAAIlB,KAAJ,CAAU,iFAAV,CAAN;AACD;;AAGD,UAAIC,aAAa;AACf,qBAAaiB;AADE,OAAjB;AAGA,UAAIhB,cAAc;AAChB,oBAAYiB,KAAK,UAAL,CADI;AAEhB,cAAMA,KAAK,IAAL;AAFU,OAAlB;AAIA,UAAIhB,eAAe,EAAnB;AAEA,UAAIC,aAAa,EAAjB;;AAGA,UAAIC,YAAY,EAAhB;AACA,UAAIC,eAAe,EAAnB;AACA,UAAIC,UAAU,CAAC,kBAAD,CAAd;AACA,UAAIC,aAAa,CAACY,MAAD,CAAjB;;AAEA,aAAO,KAAKzB,SAAL,CAAec,OAAf,CACL,+CADK,EAC4C,KAD5C,EAELR,UAFK,EAEOC,WAFP,EAEoBC,YAFpB,EAEkCC,UAFlC,EAE8CN,QAF9C,EAGLO,SAHK,EAGMC,YAHN,EAGoBC,OAHpB,EAG6BC,UAH7B,CAAP;AAKD;;AAED;;;;;;;;;;;;4CASwBU,S,EAAWC,I,EAAM;AACvC,aAAO,KAAKM,mCAAL,CAAyCP,SAAzC,EAAoDC,IAApD,EACJR,IADI,CACC,UAASC,iBAAT,EAA4B;AAChC,eAAOA,kBAAkBC,IAAzB;AACD,OAHI,CAAP;AAID;;;;;;kBAngBgBnB,gB","file":"AccountRoutesApi.js","sourcesContent":["/*\n * Copyright 2018 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * NIS2 API\n * This document defines all the nis2 api routes and behaviour\n *\n * OpenAPI spec version: 1.0.0\n * Contact: guillemchain@gmail.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n\nimport ApiClient from \"../ApiClient\";\nimport AccountInfoDTO from '../model/AccountInfoDTO';\nimport Addresses from '../model/Addresses';\nimport MultisigAccountGraphInfoDTO from '../model/MultisigAccountGraphInfoDTO';\nimport MultisigAccountInfoDTO from '../model/MultisigAccountInfoDTO';\n\n/**\n* AccountRoutes service.\n* @module api/AccountRoutesApi\n* @version 1.0.0\n*/\nexport default class AccountRoutesApi {\n\n    /**\n    * Constructs a new AccountRoutesApi. \n    * @alias module:api/AccountRoutesApi\n    * @class\n    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n    * default to {@link module:ApiClient#instance} if unspecified.\n    */\n    constructor(apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n    }\n\n\n\n    /**\n     * Get account information\n     * Returns account information for a given address or publicKey\n     * @param {String} accountId Account address or publicKey\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AccountInfoDTO} and HTTP response\n     */\n    getAccountInfoWithHttpInfo(accountId) {\n      let postBody = null;\n\n      // verify the required parameter 'accountId' is set\n      if (accountId === undefined || accountId === null) {\n        throw new Error(\"Missing the required parameter 'accountId' when calling getAccountInfo\");\n      }\n\n\n      let pathParams = {\n        'accountId': accountId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = AccountInfoDTO;\n\n      return this.apiClient.callApi(\n        '/account/{accountId}', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get account information\n     * Returns account information for a given address or publicKey\n     * @param {String} accountId Account address or publicKey\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AccountInfoDTO}\n     */\n    getAccountInfo(accountId) {\n      return this.getAccountInfoWithHttpInfo(accountId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get account information\n     * Returns information for a given address or publicKey\n     * @param {String} accountId The multisig account address or public key for which information should be retreived.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MultisigAccountInfoDTO} and HTTP response\n     */\n    getAccountMultisigWithHttpInfo(accountId) {\n      let postBody = null;\n\n      // verify the required parameter 'accountId' is set\n      if (accountId === undefined || accountId === null) {\n        throw new Error(\"Missing the required parameter 'accountId' when calling getAccountMultisig\");\n      }\n\n\n      let pathParams = {\n        'accountId': accountId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = MultisigAccountInfoDTO;\n\n      return this.apiClient.callApi(\n        '/account/{accountId}/multisig', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get account information\n     * Returns information for a given address or publicKey\n     * @param {String} accountId The multisig account address or public key for which information should be retreived.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MultisigAccountInfoDTO}\n     */\n    getAccountMultisig(accountId) {\n      return this.getAccountMultisigWithHttpInfo(accountId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get multisig graph information\n     * Returns information of all accounts address or publicKey is cosignatory\n     * @param {String} accountId The multisig account address public key for which information should be retreived.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/MultisigAccountGraphInfoDTO>} and HTTP response\n     */\n    getAccountMultisigGraphWithHttpInfo(accountId) {\n      let postBody = null;\n\n      // verify the required parameter 'accountId' is set\n      if (accountId === undefined || accountId === null) {\n        throw new Error(\"Missing the required parameter 'accountId' when calling getAccountMultisigGraph\");\n      }\n\n\n      let pathParams = {\n        'accountId': accountId\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [MultisigAccountGraphInfoDTO];\n\n      return this.apiClient.callApi(\n        '/account/{accountId}/multisig/graph', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get multisig graph information\n     * Returns information of all accounts address or publicKey is cosignatory\n     * @param {String} accountId The multisig account address public key for which information should be retreived.\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/MultisigAccountGraphInfoDTO>}\n     */\n    getAccountMultisigGraph(accountId) {\n      return this.getAccountMultisigGraphWithHttpInfo(accountId)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get accounts information\n     * Returns accounts information for a given set of address and publicKey\n     * @param {module:model/Addresses} addresses Accounts address array\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AccountInfoDTO>} and HTTP response\n     */\n    getAccountsInfoWithHttpInfo(addresses) {\n      let postBody = addresses;\n\n      // verify the required parameter 'addresses' is set\n      if (addresses === undefined || addresses === null) {\n        throw new Error(\"Missing the required parameter 'addresses' when calling getAccountsInfo\");\n      }\n\n\n      let pathParams = {\n      };\n      let queryParams = {\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [AccountInfoDTO];\n\n      return this.apiClient.callApi(\n        '/account', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get accounts information\n     * Returns accounts information for a given set of address and publicKey\n     * @param {module:model/Addresses} addresses Accounts address array\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AccountInfoDTO>}\n     */\n    getAccountsInfo(addresses) {\n      return this.getAccountsInfoWithHttpInfo(addresses)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get incoming transactions information\n     * Returns incoming transactions information for a given publicKey\n     * @param {String} publicKey Account publicKey\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The numbers of transactions to return\n     * @param {String} opts.id Id last transaction id to apply pagination\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<Object>} and HTTP response\n     */\n    incomingTransactionsWithHttpInfo(publicKey, opts) {\n      opts = opts || {};\n      let postBody = null;\n\n      // verify the required parameter 'publicKey' is set\n      if (publicKey === undefined || publicKey === null) {\n        throw new Error(\"Missing the required parameter 'publicKey' when calling incomingTransactions\");\n      }\n\n\n      let pathParams = {\n        'publicKey': publicKey\n      };\n      let queryParams = {\n        'pageSize': opts['pageSize'],\n        'id': opts['id']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [Object];\n\n      return this.apiClient.callApi(\n        '/account/{publicKey}/transactions/incoming', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get incoming transactions information\n     * Returns incoming transactions information for a given publicKey\n     * @param {String} publicKey Account publicKey\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The numbers of transactions to return\n     * @param {String} opts.id Id last transaction id to apply pagination\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<Object>}\n     */\n    incomingTransactions(publicKey, opts) {\n      return this.incomingTransactionsWithHttpInfo(publicKey, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get outgoing transactions information\n     * Returns outgoing transactions information for a given publicKey\n     * @param {String} publicKey Account publicKey\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The numbers of transactions to return\n     * @param {String} opts.id Id last transaction id to apply pagination\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<Object>} and HTTP response\n     */\n    outgoingTransactionsWithHttpInfo(publicKey, opts) {\n      opts = opts || {};\n      let postBody = null;\n\n      // verify the required parameter 'publicKey' is set\n      if (publicKey === undefined || publicKey === null) {\n        throw new Error(\"Missing the required parameter 'publicKey' when calling outgoingTransactions\");\n      }\n\n\n      let pathParams = {\n        'publicKey': publicKey\n      };\n      let queryParams = {\n        'pageSize': opts['pageSize'],\n        'id': opts['id']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [Object];\n\n      return this.apiClient.callApi(\n        '/account/{publicKey}/transactions/outgoing', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get outgoing transactions information\n     * Returns outgoing transactions information for a given publicKey\n     * @param {String} publicKey Account publicKey\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The numbers of transactions to return\n     * @param {String} opts.id Id last transaction id to apply pagination\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<Object>}\n     */\n    outgoingTransactions(publicKey, opts) {\n      return this.outgoingTransactionsWithHttpInfo(publicKey, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get partial transactions information\n     * Returns partial transactions information for a given publicKey\n     * @param {String} publicKey Account publicKey\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The numbers of transactions to return\n     * @param {String} opts.id Id last transaction id to apply pagination\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<Object>} and HTTP response\n     */\n    partialTransactionsWithHttpInfo(publicKey, opts) {\n      opts = opts || {};\n      let postBody = null;\n\n      // verify the required parameter 'publicKey' is set\n      if (publicKey === undefined || publicKey === null) {\n        throw new Error(\"Missing the required parameter 'publicKey' when calling partialTransactions\");\n      }\n\n\n      let pathParams = {\n        'publicKey': publicKey\n      };\n      let queryParams = {\n        'pageSize': opts['pageSize'],\n        'id': opts['id']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [Object];\n\n      return this.apiClient.callApi(\n        '/account/{publicKey}/transactions/partial', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get partial transactions information\n     * Returns partial transactions information for a given publicKey\n     * @param {String} publicKey Account publicKey\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The numbers of transactions to return\n     * @param {String} opts.id Id last transaction id to apply pagination\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<Object>}\n     */\n    partialTransactions(publicKey, opts) {\n      return this.partialTransactionsWithHttpInfo(publicKey, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get transactions information\n     * Returns transactions information for a given publicKey\n     * @param {String} publicKey Account publicKey\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The numbers of transactions to return\n     * @param {String} opts.id Id last transaction id to apply pagination\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<Object>} and HTTP response\n     */\n    transactionsWithHttpInfo(publicKey, opts) {\n      opts = opts || {};\n      let postBody = null;\n\n      // verify the required parameter 'publicKey' is set\n      if (publicKey === undefined || publicKey === null) {\n        throw new Error(\"Missing the required parameter 'publicKey' when calling transactions\");\n      }\n\n\n      let pathParams = {\n        'publicKey': publicKey\n      };\n      let queryParams = {\n        'pageSize': opts['pageSize'],\n        'id': opts['id']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [Object];\n\n      return this.apiClient.callApi(\n        '/account/{publicKey}/transactions', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get transactions information\n     * Returns transactions information for a given publicKey\n     * @param {String} publicKey Account publicKey\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The numbers of transactions to return\n     * @param {String} opts.id Id last transaction id to apply pagination\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<Object>}\n     */\n    transactions(publicKey, opts) {\n      return this.transactionsWithHttpInfo(publicKey, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n    /**\n     * Get unconfirmed transactions information\n     * Returns unconfirmed transactions information for a given publicKey\n     * @param {String} publicKey Account publicKey\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The numbers of transactions to return\n     * @param {String} opts.id Id last transaction id to apply pagination\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<Object>} and HTTP response\n     */\n    unconfirmedTransactionsWithHttpInfo(publicKey, opts) {\n      opts = opts || {};\n      let postBody = null;\n\n      // verify the required parameter 'publicKey' is set\n      if (publicKey === undefined || publicKey === null) {\n        throw new Error(\"Missing the required parameter 'publicKey' when calling unconfirmedTransactions\");\n      }\n\n\n      let pathParams = {\n        'publicKey': publicKey\n      };\n      let queryParams = {\n        'pageSize': opts['pageSize'],\n        'id': opts['id']\n      };\n      let headerParams = {\n      };\n      let formParams = {\n      };\n\n      let authNames = [];\n      let contentTypes = [];\n      let accepts = ['application/json'];\n      let returnType = [Object];\n\n      return this.apiClient.callApi(\n        '/account/{publicKey}/transactions/unconfirmed', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType\n      );\n    }\n\n    /**\n     * Get unconfirmed transactions information\n     * Returns unconfirmed transactions information for a given publicKey\n     * @param {String} publicKey Account publicKey\n     * @param {Object} opts Optional parameters\n     * @param {Number} opts.pageSize The numbers of transactions to return\n     * @param {String} opts.id Id last transaction id to apply pagination\n     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<Object>}\n     */\n    unconfirmedTransactions(publicKey, opts) {\n      return this.unconfirmedTransactionsWithHttpInfo(publicKey, opts)\n        .then(function(response_and_data) {\n          return response_and_data.data;\n        });\n    }\n\n\n}\n"]}