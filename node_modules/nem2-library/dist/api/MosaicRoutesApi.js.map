{"version":3,"sources":["../../src/api/MosaicRoutesApi.js"],"names":["MosaicRoutesApi","apiClient","instance","mosaicId","postBody","undefined","Error","pathParams","queryParams","headerParams","formParams","authNames","contentTypes","accepts","returnType","callApi","getMosaicWithHttpInfo","then","response_and_data","data","mosaicIds","getMosaicsWithHttpInfo","namespaceId","opts","getMosaicsFromNamespaceWithHttpInfo","getMosaicsNameWithHttpInfo"],"mappings":"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","file":"MosaicRoutesApi.js","sourcesContent":["/*\n * Copyright 2018 NEM\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * NIS2 API\n * This document defines all the nis2 api routes and behaviour\n *\n * OpenAPI spec version: 1.0.0\n * Contact: guillemchain@gmail.com\n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *\n */\n\n\nimport ApiClient from \"../ApiClient\";\nimport MosaicInfoDTO from '../model/MosaicInfoDTO';\nimport MosaicNameDTO from '../model/MosaicNameDTO';\n\n/**\n* MosaicRoutes service.\n* @module api/MosaicRoutesApi\n* @version 1.0.0\n*/\nexport default class MosaicRoutesApi {\n\n\t/**\n\t * Constructs a new MosaicRoutesApi.\n\t * @alias module:api/MosaicRoutesApi\n\t * @class\n\t * @param {module:ApiClient} [apiClient] Optional API client implementation to use,\n\t * default to {@link module:ApiClient#instance} if unspecified.\n\t */\n\tconstructor(apiClient) {\n\t\tthis.apiClient = apiClient || ApiClient.instance;\n\t}\n\n\n\t/**\n\t * Get mosaic information\n\t * Returns information for a given mosaicId\n\t * @param {String} mosaicId The mosaic id for which information should be retreived\n\t * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MosaicInfoDTO} and HTTP response\n\t */\n\tgetMosaicWithHttpInfo(mosaicId) {\n\t\tlet postBody = null;\n\n\t\t// verify the required parameter 'mosaicId' is set\n\t\tif (mosaicId === undefined || mosaicId === null) {\n\t\t\tthrow new Error(\"Missing the required parameter 'mosaicId' when calling getMosaic\");\n\t\t}\n\n\n\t\tlet pathParams = {\n\t\t\t'mosaicId': mosaicId\n\t\t};\n\t\tlet queryParams = {};\n\t\tlet headerParams = {};\n\t\tlet formParams = {};\n\n\t\tlet authNames = [];\n\t\tlet contentTypes = [];\n\t\tlet accepts = ['application/json'];\n\t\tlet returnType = MosaicInfoDTO;\n\n\t\treturn this.apiClient.callApi(\n\t\t\t'/mosaic/{mosaicId}', 'GET',\n\t\t\tpathParams, queryParams, headerParams, formParams, postBody,\n\t\t\tauthNames, contentTypes, accepts, returnType\n\t\t);\n\t}\n\n\t/**\n\t * Get mosaic information\n\t * Returns information for a given mosaicId\n\t * @param {String} mosaicId The mosaic id for which information should be retreived\n\t * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MosaicInfoDTO}\n\t */\n\tgetMosaic(mosaicId) {\n\t\treturn this.getMosaicWithHttpInfo(mosaicId)\n\t\t\t.then(function(response_and_data) {\n\t\t\t\treturn response_and_data.data;\n\t\t\t});\n\t}\n\n\n\t/**\n\t * Get information for a set of mosaics\n\t * Returns information for a given set of mosaicIds\n\t * @param {module:model/MosaicIds} mosaicIds Array of mosaicIds\n\t * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/MosaicInfoDTO>} and HTTP response\n\t */\n\tgetMosaicsWithHttpInfo(mosaicIds) {\n\t\tlet postBody = mosaicIds;\n\n\t\t// verify the required parameter 'mosaicIds' is set\n\t\tif (mosaicIds === undefined || mosaicIds === null) {\n\t\t\tthrow new Error(\"Missing the required parameter 'mosaicIds' when calling getMosaics\");\n\t\t}\n\n\n\t\tlet pathParams = {};\n\t\tlet queryParams = {};\n\t\tlet headerParams = {};\n\t\tlet formParams = {};\n\n\t\tlet authNames = [];\n\t\tlet contentTypes = [];\n\t\tlet accepts = ['application/json'];\n\t\tlet returnType = [MosaicInfoDTO];\n\n\t\treturn this.apiClient.callApi(\n\t\t\t'/mosaic', 'POST',\n\t\t\tpathParams, queryParams, headerParams, formParams, postBody,\n\t\t\tauthNames, contentTypes, accepts, returnType\n\t\t);\n\t}\n\n\t/**\n\t * Get information for a set of mosaics\n\t * Returns information for a given set of mosaicIds\n\t * @param {module:model/MosaicIds} mosaicIds Array of mosaicIds\n\t * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/MosaicInfoDTO>}\n\t */\n\tgetMosaics(mosaicIds) {\n\t\treturn this.getMosaicsWithHttpInfo(mosaicIds)\n\t\t\t.then(function(response_and_data) {\n\t\t\t\treturn response_and_data.data;\n\t\t\t});\n\t}\n\n\n\t/**\n\t * Get mosaics information\n\t * Returns information for a given namespaceId\n\t * @param {String} namespaceId The namespace id for which mosaics information should be retreived\n\t * @param {Object} opts Optional parameters\n\t * @param {Number} opts.pageSize The numbers of mosaics to return\n\t * @param {String} opts.id Id last mosaic id to apply pagination\n\t * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/MosaicInfoDTO>} and HTTP response\n\t */\n\tgetMosaicsFromNamespaceWithHttpInfo(namespaceId, opts) {\n\t\topts = opts || {};\n\t\tlet postBody = null;\n\n\t\t// verify the required parameter 'namespaceId' is set\n\t\tif (namespaceId === undefined || namespaceId === null) {\n\t\t\tthrow new Error(\"Missing the required parameter 'namespaceId' when calling getMosaicsFromNamespace\");\n\t\t}\n\n\n\t\tlet pathParams = {\n\t\t\t'namespaceId': namespaceId\n\t\t};\n\t\tlet queryParams = {\n\t\t\t'pageSize': opts['pageSize'],\n\t\t\t'id': opts['id']\n\t\t};\n\t\tlet headerParams = {};\n\t\tlet formParams = {};\n\n\t\tlet authNames = [];\n\t\tlet contentTypes = [];\n\t\tlet accepts = ['application/json'];\n\t\tlet returnType = [MosaicInfoDTO];\n\n\t\treturn this.apiClient.callApi(\n\t\t\t'/namespace/{namespaceId}/mosaics', 'GET',\n\t\t\tpathParams, queryParams, headerParams, formParams, postBody,\n\t\t\tauthNames, contentTypes, accepts, returnType\n\t\t);\n\t}\n\n\t/**\n\t * Get mosaics information\n\t * Returns information for a given namespaceId\n\t * @param {String} namespaceId The namespace id for which mosaics information should be retreived\n\t * @param {Object} opts Optional parameters\n\t * @param {Number} opts.pageSize The numbers of mosaics to return\n\t * @param {String} opts.id Id last mosaic id to apply pagination\n\t * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/MosaicInfoDTO>}\n\t */\n\tgetMosaicsFromNamespace(namespaceId, opts) {\n\t\treturn this.getMosaicsFromNamespaceWithHttpInfo(namespaceId, opts)\n\t\t\t.then(function(response_and_data) {\n\t\t\t\treturn response_and_data.data;\n\t\t\t});\n\t}\n\n\n\t/**\n\t * Get readable names for a set of mosaics\n\t * Returns names for mosaics\n\t * @param {module:model/MosaicIds} mosaicIds Array of mosaicIds\n\t * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/MosaicNameDTO>} and HTTP response\n\t */\n\tgetMosaicsNameWithHttpInfo(mosaicIds) {\n\t\tlet postBody = mosaicIds;\n\n\t\t// verify the required parameter 'mosaicIds' is set\n\t\tif (mosaicIds === undefined || mosaicIds === null) {\n\t\t\tthrow new Error(\"Missing the required parameter 'mosaicIds' when calling getMosaicsName\");\n\t\t}\n\n\n\t\tlet pathParams = {};\n\t\tlet queryParams = {};\n\t\tlet headerParams = {};\n\t\tlet formParams = {};\n\n\t\tlet authNames = [];\n\t\tlet contentTypes = [];\n\t\tlet accepts = ['application/json'];\n\t\tlet returnType = [MosaicNameDTO];\n\n\t\treturn this.apiClient.callApi(\n\t\t\t'/mosaic/names', 'POST',\n\t\t\tpathParams, queryParams, headerParams, formParams, postBody,\n\t\t\tauthNames, contentTypes, accepts, returnType\n\t\t);\n\t}\n\n\t/**\n\t * Get readable names for a set of mosaics\n\t * Returns names for mosaics\n\t * @param {module:model/MosaicIds} mosaicIds Array of mosaicIds\n\t * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/MosaicNameDTO>}\n\t */\n\tgetMosaicsName(mosaicIds) {\n\t\treturn this.getMosaicsNameWithHttpInfo(mosaicIds)\n\t\t\t.then(function(response_and_data) {\n\t\t\t\treturn response_and_data.data;\n\t\t\t});\n\t}\n\n\n}\n"]}